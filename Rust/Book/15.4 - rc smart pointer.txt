15.4 - rc smart pointer

Environment:
    Ubuntu 18.04.4 LTS
    2GB RAM
    1 CPU
    20 GB Storage
    Internet-connected

Steps:
    1. Create Cargo project
        $ cargo new rc_smart_pointer

    2. Crates
        use crate::List::{Cons, Nil};
        use std::rc::Rc;

    3. Code
        enum List
        {
            Cons(i32, Rc<List>),
            Nil,
        }

        use crate::List::{Cons, Nil};
        use std::rc::Rc;    // bring Rc into scope to share data

        #[allow(unused_variables)]
        fn main()
        {
            let a = Rc::new(Cons(5, Rc::new(Cons(10, Rc::new(Nil)))));  // the data that is being shared
            println!("count after creating a = {}", Rc::strong_count(&a));  //print the reference count
            let b = Cons(3, Rc::clone(&a)); // increment the reference count to keep track of the number of owners. Once count decrements to 0 (i.e. everyone is done using the resource), the data will be cleaned
            println!("count after creating b = {}", Rc::strong_count(&a));  //print the reference count
            { //define a new scope to intentionally decrement the reference count
                let c = Cons(4, Rc::clone(&a));
                println!("count after creating c = {}", Rc::strong_count(&a));  //print the reference count
            }
            println!("count after c goes outof scope = {}", Rc::strong_count(&a));  //print the reference count
        }

    4. run
        $ cargo run

Learned:
    - rc<t> allows multiple ownership in single-threaded scenarios ONLY for immutable references.
    - reference count begins at 1 once ownership is established
    
