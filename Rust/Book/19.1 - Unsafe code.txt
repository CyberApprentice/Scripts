19.1 - Unsafe code
w
Environment:
    Ubuntu 18.04.4 LTS
    2GB RAM
    1 CPU
    20 GB Storage
    Internet-connected

Steps:
    1. Create Cargo project
        $ cargo new usnafe_code

    2. Crates
        N/A

    3. Coded
        #[allow(dead_code)]
        fn main()
        {
            // example 1 - dereferencing a raw pointer to an arbitrary memory address
            let mut num = 5;

            let r1 = &num as *const i32;    // can create immutable without ownership complaints
            let r2 = &mut num as *mut i32;  // can create mutable without ownership complaints

            unsafe {
                println!("r1 is: {}", *r1);
                println!("r2 is: {}", *r2);     // 2 different mutabilities referring to the same data could result in data race!
            }

            // Example 2 - defining and calling an unsafe function/method

            unsafe fn dangerous() {}

            unsafe {
                dangerous();
            }

            // Example 3 - safe abstraction over unsafe code

            use std::slice;

            fn split_at_mut(slice: &mut [i32], mid: usize) -> (&mut [i32], &mut [i32]) {
                let len = slice.len();  // get length
                let ptr = slice.as_mut_ptr();   // get raw pointer

                assert!(mid <= len);    // fail if we can't split it

                unsafe {
                    (// the functions aren't safe, the compiler will error, but we know the code is valid because we aren't referring to the same memory locations
                        slice::from_raw_parts_mut(ptr, mid),   // referring to the first half of the slice
                        slice::from_raw_parts_mut(ptr.add(mid), len - mid), // referring to the last half of the slice
                    )
                }
            }

            // Example 4 - calling external code
            extern "C" {        // extern enables foreign languages to call functions
                fn abs(input: i32) -> i32;  // "abs" is from the C standard library
            }
            
            fn main() {
                unsafe {
                    println!("Absolute value of -3 according to C: {}", abs(-3));
                }
            }

            // Example 5 - Allow external code to call foreign Rust code
            #[no_mangle]    // required so the compiler doesn't "mangle" the name
            pub extern "C" fn call_from_c() {   // notice the use of "extern"
                println!("Just called a Rust function from C!");
            }

            // Example 6 - static variables (i.e. global variables)
            static HELLO_WORLD: &str = "Hello, world!"; // must use uppercase and define the type


            println!("name is: {}", HELLO_WORLD);

            // Example 7 - mutable static variables
            static mut COUNTER: u32 = 0;

            fn add_to_count(inc: u32) {
                unsafe {
                    COUNTER += inc; // modifying static variables is unsafe in multi-threaded programs
                }
            }


            add_to_count(3);

            unsafe {
                println!("COUNTER: {}", COUNTER);
            }

            // exmaple 8 - implementing unsafe traits
            unsafe trait Foo {
                // methods go here
            }
            
            unsafe impl Foo for i32 {
                // method implementations go here
            }
            
        }



    4. run
        $ cargo run

Learned:
    - unsafe superpowers = "I know what I'm doing"
        - Allowed to: dereference a raw pointer
        - call an unsafe function/method
        - access or modify a mutable static variable
        - implement an unsafe trait
        - access fields of union
    - enclosed in an "unsafe" block
    - Benefits using unsafe code:
        - interating with other languages (e.g. C)
    - global variables = static variables in Rust
        - just don't use static variables with a multi-threaded program. It will cause data races. This is why it is unsafe.