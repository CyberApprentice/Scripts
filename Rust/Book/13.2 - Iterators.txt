13.2 - Iterators

Environment:
    Ubuntu 18.04.4 LTS
    2GB RAM
    1 CPU
    20 GB Storage
    Internet-connected

Steps:
    1. Create Cargo project
        $ cargo new iterators

    2. Crates
        N/A

    3. lib.rs
                
        struct Shoe
        {
            size: u32,     //show.size | self.size
            style: String,  // show.style | self.style
        }

        fn shoes_in_my_size(shoes: Vec<Shoe>,
                            shoe_size: u32)
                            -> Vec<Shoe>
        {
            shoes.into_iter()   // into_iter takes ownership
                .filter         // create a new iterator that returns true in the closure below
                (|s| s.size == shoe_size)   // if returns true, it is put into the new iterator
                .collect()  // convert to a vector

        }

        #[cfg(test)]
        mod tests {
            use super::*;

            #[test]
            fn filters_by_size() {
                let shoes = vec![
                    Shoe {
                        size: 10,
                        style: String::from("sneaker"),
                    },
                    Shoe {
                        size: 13,
                        style: String::from("sandal"),
                    },
                    Shoe {
                        size: 10,
                        style: String::from("boot"),
                    },
                ];

                let in_my_size = shoes_in_my_size(shoes, 10);

                assert_eq!(
                    in_my_size,
                    vec![
                        Shoe {
                            size: 10,
                            style: String::from("sneaker")
                        },
                        Shoe {
                            size: 10,
                            style: String::from("boot")
                        },
                    ]
                );
            }

            #[test]
            // test the iterator we created
            fn calling_next_directly()
            {
                let mut counter = Counter::new();   // create a new instance with counter = 0
                assert_eq!(counter.next(), Some(1));    // call the next() function that increments by 1..
                assert_eq!(counter.next(), Some(2));
                assert_eq!(counter.next(), Some(3));
                assert_eq!(counter.next(), Some(4));
                assert_eq!(counter.next(), Some(5));
                assert_eq!(counter.next(), None);   // verify that the iteration is over, which returns None
            }
        }

        /* create an iterator */

        struct Counter
        {
            count: u32,
        }

        impl Counter 
        {
            fn new() -> Counter
            {
                Counter
                {
                    count: 0    // set count to 0 everytime a new instance is formed
                }
            }
        }

        impl Iterator for Counter
        {
            type Item = u32;    // defines an associated type which is the data type returned by the iterator

            fn next (&mut self) -> Option<Self::Item>
            {
                if self.count < 5
                {
                    self.count +=1;
                    Some(self.count)
                }
                else
                {
                    None
                }
            }
        }
    3.1 main.rs
        fn main()
        {
            let v1: Vec<i32> = vec![1,2,3];     // create a vector containing three i32 values

            v1.iter().map(|x| x + 1);    // this does nothing until used
                                        // calling an iterator adapter (map) on an iterator to change it into a different kind of iterator.alloc
                                        // In this case, a closure that returns an iterator after adding 1 to each element
            let v2: Vec<_> = v1.iter().map(|x| x + 1).collect();        // now it does something!
            assert_eq!(v2, vec![2,3,4]);
        }


    4. run
        $ cargo run

Learned:
    - iterators are faster than loops, although slightly, despite them being a higher level of abstraction
        - termed, zero-cost abstraction