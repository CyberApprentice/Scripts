18.3 - Pattern Syntax

Environment:
    Ubuntu 18.04.4 LTS
    2GB RAM
    1 CPU
    20 GB Storage
    Internet-connected

Steps:
    1. Create Cargo project
        $ cargo new pattern_syntax

    2. Crates
        N/A

    3. Code
        #[allow(dead_code)]
        #[allow(unused_variables)]
        fn main()
        {
            let x = 1;

            match x
            {
                // matching a literal
                1 => println!("one"),   // if x is 1, print the string literal

                // operator match
                2 | 3 => println!("two or three"),

                // range match
                4..=8 => println!("4 | 5 | 6 | 7 | 8"),
                
                // implicit match
                _ => println!("anything"),
            }

            // some match example
            let x = Some(5);
            let y = 10;
            match x
            {
                Some(50) => println!("Got 50"),
                Some(y) => println!("This will automatically be declared as the value we are matching, x.\n Matched y = {:?}",y),
                _ => println!("Something else"),
            }
            println!("x = {:?}, y = {:?}", x, y);

            // char match
            let x =  'c';
            match x
            {
                'a'..='z' => println!("any alphabet"),
                _=> println!("something else"),
            }

            // struct match
            struct Point
            {
                x: i32,
                y: i32,
            }

            let p = Point {x: 0, y: 7};
            match p
            {
                Point {x, y:0} => println!("On the x axis at {}", x),   // 'x' in this case represents any i32 value that isn't 0.
                Point{x:0, y} => println!("On the y axis at {}", y), // the opposite of above
                Point{x, y} => println!("On neither axis: ({}, {})", x, y), // the implicit match
            }

            // enum match
            enum Message {
                Quit,
                Move { x: i32, y: i32 },
                Write(String),
                ChangeColor(i32, i32, i32),
            }

            let msg = Message::ChangeColor(0, 160, 255);

            match msg {
                Message::Quit => {
                    println!("The Quit variant has no data to destructure.")
                }
                Message::Move { x, y } => {
                    println!(
                        "Move in the x direction {} and in the y direction {}",
                        x, y
                    );
                }
                Message::Write(text) => println!("Text message: {}", text),
                Message::ChangeColor(r, g, b) => println!(
                    "Change the color to red {}, green {}, and blue {}",
                    r, g, b
                ),
            }

            // nested enums
            enum Color {
                Rgb(i32, i32, i32),
                Hsv(i32, i32, i32),
            }
            enum Message2 {
                Quit,
                Move { x: i32, y: i32 },
                Write(String),
                ChangeColor(Color),
            }

            let msg = Message2::ChangeColor(Color::Hsv(0, 160, 255));

            match msg {
                Message2::ChangeColor(Color::Rgb(r, g, b)) => println!(
                    "Change the color to red {}, green {}, and blue {}",
                    r, g, b
                ),
                Message2::ChangeColor(Color::Hsv(h, s, v)) => println!(
                    "Change the color to hue {}, saturation {}, and value {}",
                    h, s, v
                ),
                _ => (),
            }

            // structs and tuples example
            let ((feet, inches), Point { x, y }) = ((3, 10), Point { x: 3, y: -10 });

            // ignoring values using '_' - example 1
            fn foo(_: i32, y: i32) {
                println!("This code only uses the y parameter: {}", y);
            }
            
            fn main() {
                foo(3, 4);
            }

            // example 2
            let mut setting_value = Some(5);
            let new_setting_value = Some(10);

            match (setting_value, new_setting_value) {
                (Some(_), Some(_)) => {
                    println!("Can't overwrite an existing customized value");
                }
                _ => {  // if the value is None
                    setting_value = new_setting_value;
                }
            }

            println!("setting is {:?}", setting_value);


            // example 3
            let numbers = (2, 4, 8, 16, 32);

            match numbers {
                (first, _, third, _, fifth) => {
                    println!("Some numbers: {}, {}, {}", first, third, fifth)   // prints "Some numbers: 2, 8, 32"
                }
            }

            // example 4
            let _x = 5;
            let y = 10;

            // example 5 - maintaining ownership with '_'

            let s = Some(String::from("Hello!"));

            if let Some(_) = s {    // ownership of 's' was not bounded
                println!("found a string");
            }

            println!("{:?}", s);    // will work!

            // ignoring values with '..'
            let numbers = (2, 4, 8, 16, 32);

            match numbers {
                (first, .., last) => {  // ignored everything in the middle
                    println!("Some numbers: {}, {}", first, last);
                }
            }

            // match guards - example 1
            let num = Some(4);

            match num {
                Some(x) if x < 5 => println!("less than five: {}", x),  // some(4) && if some(4) is less than 5. This takes the cake!
                Some(x) => println!("{}", x),
                None => (),
            }

            // example 2 - fixes pattern-shadowing problem
            let x = Some(5);
            let y = 10;

            match x {
                Some(50) => println!("Got 50"),
                Some(n) if n == y => println!("Matched, n = {}", n), // some(5) && if 5 == 10. This fails!
                _ => println!("Default case, x = {:?}", x), // This is true
            }

            // example 3

            let x = 4;
            let y = false;

            match x {
                4 | 5 | 6 if y => println!("yes"),  // same as (4 | 5 | 6) if y => println!("yes")
                                                    // NOT 4 | 5 | (6 if y => println!("yes"))
                _ => println!("no"),    // this is true
            }

            // example using @

            enum Message3 {
                Hello { id: i32 },
            }

            let msg = Message3::Hello { id: 5 };

            match msg {
                Message3::Hello {
                    id: id_variable @ 3..=7,            // we are defining a variable to be used to print
                } => println!("Found an id in range: {}", id_variable),
                Message3::Hello { id: 10..=12 } => {
                    println!("Found an id in another range")    // cannot print using "id". We would need the @
                }
                Message3::Hello { id } => println!("Found some other id: {}", id),  // matches any value
            }
        }

    4. run
        $ cargo run

Learned:
    - Operators can be used with match patterns. 
        e.g. 1 | 2 => println!("1 or 2");
    - Ignoring values can be useful to fill in parameters to avoid compiler warnings
    - When using '..', make surte it is not unambigious (similar to ipv6 '::')
        e.g. match numbers {
                (.., second, ..) => {
                    println!("Some numbers: {}", second)
                },
            // This will not compile!
    - match guards can be used in addition to match patterns
        e.g. if statements
    - we can use @ bindings to match and define a variable